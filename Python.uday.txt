#!/usr/bin/python
 
import json
import urllib
import urllib2
 
ZENOSS_INSTANCE = 'https://zenoss5.v5.fg.loc'
ZENOSS_USERNAME = 'admin'
ZENOSS_PASSWORD = 'Zenoss!2'
 
ROUTERS = { 'DeviceRouter': 'device',
            'PropertiesRouter': 'properties' }
 
 
class API():
    def __init__(self, debug=False):
        self.urlOpener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
        if debug:
            self.urlOpener.add_handler(urllib2.HTTPHandler(debuglevel=1))
        self.reqCount = 1
 
        loginParams = urllib.urlencode(dict(
            __ac_name=ZENOSS_USERNAME,
            __ac_password=ZENOSS_PASSWORD,
            submitted='true',
            came_from=ZENOSS_INSTANCE + '/zport/dmd'))
        self.urlOpener.open(
            ZENOSS_INSTANCE + '/zport/acl_users/cookieAuthHelper/login',
            loginParams)
 
    def _router_request(self, router, method, data=[]):
        if router not in ROUTERS:
            raise Exception('Router "' + router + '" not available.')
 
        # Contruct a standard URL request for API calls
        req = urllib2.Request(ZENOSS_INSTANCE + '/zport/dmd/' +
                              ROUTERS[router] + '_router')
 
        req.add_header('Content-type', 'application/json; charset=utf-8')
 
        # Convert the request parameters into JSON
        reqData = json.dumps([dict(
            action=router,
            method=method,
            data=data,
            type='rpc',
            tid=self.reqCount)])
        print "Payload generated as {}".format(str(reqData))
 
        self.reqCount += 1
 
        # Submit the request and convert the returned JSON to objects
        return json.loads(self.urlOpener.open(req, reqData).read())
 
if __name__ == '__main__':
    api = API(debug=True)
   
    #the following two print statements will list all the uid's in the system
    print "Listing Device Uids for /Server/SSH/Linux/..."
    print str(api._router_request('DeviceRouter', 'getDeviceUids',
                                 # data=[{'uid': '/zport/dmd/Devices/Server/SSH/Linux/'}]))
                                            data=[{'uid': '/zport/dmd/Devices/Server/SSH/AIX/IBM_PowerVM/Guardian/Database/'}]))
    print "\n\n"
   
    #These two statements list the current value for the zprop "zLinks" On a test device
    print "Listing value for zProp 'zLinks' on device '10.88.111.113'..."
    print str(api._router_request('PropertiesRouter', 'getZenProperty',
                                  #data=[{'uid': '/zport/dmd/Devices/Server/SSH/Linux/devices/10.88.111.113', 'zProperty': 'zLinks'}]))
    print "\n\n"                 # data=[{'uid': '/zport/dmd/Devices/Server/SSH/Linux/devices/10.88.111.113', 'zProperty': 'zOracleConnectionStrings'}]))
   
    #these statmentrs set the value to 'test-update'
    print "Setting zLinks Zprop on device to 'test-update'..."
    print str(api._router_request('PropertiesRouter', 'setZenProperty',
 
                                   data=[{'uid': '/zport/dmd/Devices/Server/SSH/Linux/devices/10.88.111.113', 'zProperty': 'zLinks', 'value': 'test-update' }]))
                                              #   data=[{'uid': '/zport/dmd/Devices/Server/SSH/Linux/devices/10.88.111.113', 'zProperty': 'zOracleConnectionStrings', 'value': '${here/zOracleUser}/${here/zOraclePassword}@${here/titleOrId}:45000:rsbfx' }]))
    
     print "\n\n"
 
    #These two statements list the current value for the zprop "zLinks" On a test device, same as lines 64 - 66
    print "Verifying zProp updated..."
    print str(api._router_request('PropertiesRouter', 'getZenProperty',
                                   data=[{'uid': '/zport/dmd/Devices/Server/SSH/Linux/devices/10.88.111.113', 'zProperty': 'zLinks'}]))
                                               #data=[{'uid': '/zport/dmd/Devices/Server/SSH/Linux/devices/10.88.111.113', 'zProperty': 'zOracleConnectionStrings'}]))